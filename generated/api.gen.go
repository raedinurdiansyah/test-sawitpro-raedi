// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// DefaultUpdateResponse defines model for DefaultUpdateResponse.
type DefaultUpdateResponse struct {
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// ErrorWithExtraResponse defines model for ErrorWithExtraResponse.
type ErrorWithExtraResponse struct {
	Extra   *interface{} `json:"extra,omitempty"`
	Message string       `json:"message"`
}

// LoginUserPayload defines model for LoginUserPayload.
type LoginUserPayload struct {
	Password    string `json:"password" validate:"required,min=6,max=64,pwd"`
	PhoneNumber string `json:"phone_number" validate:"required,min=10,max=13,phone_number"`
}

// RegisterUserPayload defines model for RegisterUserPayload.
type RegisterUserPayload struct {
	FullName    string `json:"full_name" validate:"required,min=3,max=60"`
	Password    string `json:"password" validate:"required,min=6,max=64,pwd"`
	PhoneNumber string `json:"phone_number" validate:"required,min=10,max=13,phone_number"`
}

// SuccessGetUserProfileResponse defines model for SuccessGetUserProfileResponse.
type SuccessGetUserProfileResponse struct {
	// CreatedAt User created at
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// FullName User full name
	FullName string `json:"full_name"`

	// Guid User GUID
	Guid openapi_types.UUID `json:"guid"`

	// PhoneNumber User phone number
	PhoneNumber string `json:"phone_number"`
}

// SuccessLoginUserResponse defines model for SuccessLoginUserResponse.
type SuccessLoginUserResponse struct {
	ExpiredAt string `json:"expired_at"`
	Token     string `json:"token"`
}

// SuccessRegisterUserResponse defines model for SuccessRegisterUserResponse.
type SuccessRegisterUserResponse struct {
	GUID    openapi_types.UUID `json:"GUID"`
	Message string             `json:"message"`
}

// UpdateUserPayload defines model for UpdateUserPayload.
type UpdateUserPayload struct {
	FullName    string `json:"full_name" validate:"required,min=3,max=60"`
	PhoneNumber string `json:"phone_number" validate:"required,min=6,max=64,phone_number"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserPayload

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserPayload

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserPayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This is an endpoint to login user
	// (POST /login)
	LoginUser(ctx echo.Context) error
	// This is an endpoint to register user
	// (POST /register)
	RegisterUser(ctx echo.Context) error
	// Endpoint to get user profile
	// (GET /users/)
	GetUserProfile(ctx echo.Context) error
	// This is an endpoint to update user data
	// (PUT /users/)
	UpdateUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// RegisterUser converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterUser(ctx)
	return err
}

// GetUserProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserProfile(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.LoginUser)
	router.POST(baseURL+"/register", wrapper.RegisterUser)
	router.GET(baseURL+"/users/", wrapper.GetUserProfile)
	router.PUT(baseURL+"/users/", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY32vjOBD+V4TuHu213XQb1rAvy5alsAdHt+UeSimqNbG1Z0s6Se4PQv73Q2MnthPH",
	"vYMk5bg3Nxppvvlm5puhS5qpSisJ0lmaLqnNCqgYfn6FBatLd6s5c3ANVitpwR9oozQYJwDNKrCW5Xjg",
	"XjXQlFpnhMzpahVQA3/VwgCn6d3G8D5YG6rHn5A5ugropTHKnMLHH8IVly/OsP3OwB/TdLkKDuP3u8qF",
	"vLVgfmevpWJ816Nm1j4rw3f9BPQlVEyLMFMccpAhggsdy/HiEyuFzw5NN2iCSsjPF0HFXj5fnAf6mSNW",
	"XSgJD7KuHsEczEsSo5tkFgyeX22TMzgNumjHyLqGXFgHZpKvRV2WD5JVcLBQZg1hcUPW/yodHZlvpOZH",
	"nWVg7TdwmByjFqKc0IXMAHPAH5jzf3GwmRHaCSVpSv0DpDUgzHkUylTekvrIQicQzlbPBcPEjzzpz0kb",
	"y87lvBZ8z71vt1df+yBqbzryxHbeRp5CE7Jhd1o28sbPIAV9FxNp2KjKlJBp76jNQCXkd5C5K2iajITm",
	"1J8g37Tbwt9cCvqeJiD3e7uPGl5Ypcs1ZvxO/DdmJaXJp8eLs9nHeTi/gFl4nvHz8NMsXoTxx2zO+Dw5",
	"g2ROe1rdBzskpHlw+Xae/7Hut4UzJf/N/HxXPTuG2nSaNik2/6K0/VUhF8p7LUUGbXU0vNDfrm6wTIUr",
	"Yd1rP8A8icw//QTGNk2YfIg/xN5SaZBMC5rSGf7k1c0VGFNU+ubBPCiLzeGzwXwbX3GadhObNsGAdV8U",
	"f0VVU9KBxDtM61JkeCv6aZXs1if/9auBBU3pL1G3X0XtchXtbAQYu62riplXX5Y+OMRIWvdEry09oqZ1",
	"MJSzOD4YrL3KgvCGWtfaejznB4Qw3ANH/H5hnFw3nNAhaTeFsERYwiQBybUS0hGnWho9o2gfmVaE9me/",
	"L1NHKoCxLWerBtY4iVpPSiLhGQN5j6IY1e4T18Xu7n6IAtkQ3dWI/7KRx5TDSIEMNyB6fPL3rFxv0Z+c",
	"ri2vJM4JcoMLAXqfnc47NgVXYIlUjhTsCQhreRhUwGUv7Tm4ppn0Jo3NyLvD58L1z/d+gNYjVdDN9SOJ",
	"xO7isD0m0OD0kjD+j4H/8pDoM8mZYy3TYPxeQdO7Ja1NSVNaOKfTKCpVxsrCD4/V/ervAAAA//9wZlxV",
	"QhEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
